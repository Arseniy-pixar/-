#include <iostream>
using namespace std;

// Функция объединения двух отсортированных частей массива
void merge(int arr[], int left, int mid, int right) {
    int n1 = mid - left + 1;      // Размер левой части
    int n2 = right - mid;         // Размер правой части

    // Создаем временные массивы для хранения обеих частей
    int L[n1], R[n2];

    // Копируем данные в временные массивы
    for (int i = 0; i < n1; ++i)
        L[i] = arr[left + i];
    for (int j = 0; j < n2; ++j)
        R[j] = arr[mid + 1 + j];

    // Индексы временных массивов и основного массива
    int i = 0, j = 0, k = left;

    // Сливаем временные массивы обратно в основной массив
    while (i < n1 && j < n2) {
        if (L[i] <= R[j])
            arr[k++] = L[i++];
        else
            arr[k++] = R[j++];
    }

    // Остаточные элементы левого временного массива
    while (i < n1)
        arr[k++] = L[i++];

    // Остаточные элементы правого временного массива
    while (j < n2)
        arr[k++] = R[j++];
}

// Основная функция сортировки слиянием
void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        // Определяем середину массива
        int mid = left + (right - left) / 2;

        // Рекурсивно сортируем левую и правую половины
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);

        // Объединяем отсортированные половины
        merge(arr, left, mid, right);
    }
}

// Функция для печати массива
void printArray(const int arr[], int size) {
    for (int i = 0; i < size; ++i)
        cout << arr[i] << " ";
    cout << endl;
}

int main() {
    int arr[] = {38, 27, 43, 3, 9, 82, 10};
    int n = sizeof(arr) / sizeof(arr[0]);

    cout << "Исходный массив:\n";
    printArray(arr, n);

    mergeSort(arr, 0, n - 1);     // сортируем массив

    cout << "\nОтсортированный массив:\n";
    printArray(arr, n);

    return 0;
}
